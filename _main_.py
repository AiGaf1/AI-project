# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from os import listdir

from networkx.algorithms.tree.mst import minimum_spanning_tree
from matrix_functions import *
from Algorithms.new_ACO import AntColony
from Algorithms.greedyAlgoVersion1 import greedyAlgoVersion1
from Algorithms.greedyAlgoVersion2 import greedyAlgoVersion2
from Algorithms.dynamic import dynamProg
from Algorithms.bruteForce import brute_force
from Algorithms.minSpannigTree import run_MNS
from Algorithms.branchAndBound import branchAndBound


import sip
import time
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as Navi


class MatplotlibCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, dpi=120):
        fig = Figure(dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MatplotlibCanvas, self).__init__(fig)
        fig.tight_layout()


class Ui_MainWindow(object):
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Symmetric TSP"))
        self.label.setText(_translate("MainWindow", "Algorithms"))
        self.label_2.setText(_translate("MainWindow", "TSP"))
        self.pushButton.setText(_translate("MainWindow", "Run"))

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(812, 670)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.comboBox_1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_1.setObjectName("comboBox_1")
        self.horizontalLayout.addWidget(self.comboBox_1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setReadOnly(True)

        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(
             self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout.addWidget(self.textEdit)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.spacerItem = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(self.spacerItem)
        self.gridLayout_2.addLayout(self.verticalLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 812, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # this is the end of autogenerated code
        self.canv = MatplotlibCanvas(self)

        self.toolbar = Navi(self.canv, self.centralwidget)
        self.horizontalLayout.addWidget(self.toolbar)

        self.filenames = sorted(listdir('TSP'))
        self.algos = sorted(['Greedy', 'Greedy++', 'ACO', 'Dynamic', 'Brute Force', 'Min Spanning Tree', 'Branch and Bound' ])


        
        self.algo_func = {'Greedy': greedyAlgoVersion1, 'Greedy++' : greedyAlgoVersion2, 'Dynamic' : dynamProg, 'Brute Force' : brute_force, 
                        'Min Spanning Tree' : run_MNS, 'Branch and Bound' : branchAndBound}

        self.comboBox_1.addItems(self.algos)
        self.comboBox.addItems(self.filenames)

        self.pushButton.clicked.connect(self.Update)

    # def makePlot(self):

    def Update(self):

        self.readData()
        self.useAlgo()
        
        #self.points = calculate_positions(self.adj_matrix)
        str_distance = str(round((self.distance),2))
        self.time = str(round((self.time),5))

        
        self.textEdit.setText("Route length: " + str_distance + "  Time: " + self.time + ' sec')
        self.makePlot()

    def useAlgo(self):

        # get current name of algorithm of combobox
        algoName = str(self.comboBox_1.currentText())
        start = time.process_time()
        
        if algoName == "ACO":
            ACO = AntColony(self.adj_matrix, 20)
            self.path, self.distance = ACO.run()     
        else:
            self.path, self.distance = self.algo_func[algoName](self.adj_matrix)
            
        self.time = time.process_time() - start

        

    def readData(self):
        """ This function will read the data using pandas and call the update
                function to plot
        """

        # get current filname of combobox
        filename = str(self.comboBox.currentText())
        self.df = file_to_df(filename)
        self.adj_matrix = get_matrix(self.df)

    def makePlot(self):

        plt.clf()
        plt.style.use('ggplot')
        try:
            self.horizontalLayout.removeWidget(self.toolbar)
            self.verticalLayout.removeWidget(self.canv)
            
            sip.delete(self.toolbar)
            sip.delete(self.canv)
            self.toolbar = None
            self.canv = None
            self.verticalLayout.removeItem(self.spacerItem)
        except Exception as e:
            print(e)
            pass

        self.canv = MatplotlibCanvas(self)
        self.toolbar = Navi(self.canv,self.centralwidget)
		
        self.horizontalLayout.addWidget(self.toolbar)
        self.verticalLayout.addWidget(self.canv)

        
        classicPlot(self)

def classicPlot(self):
    ax = self.canv.axes
    self.points = self.df.values
    x = [self.points[i][1] for i in self.path]
    y = [self.points[i][2] for i in self.path]
   
    a_scale = float(max(x) + min(x))/float(130)
    ax.scatter(x,y)

    ax.arrow(x[-1], y[-1], (x[0] - x[-1]), (y[0] - y[-1]), head_width=a_scale,
        color='g', length_includes_head=True)
    for i in range(0, len(x)-1):
        ax.arrow(x[i], y[i], (x[i+1] - x[i]), (y[i+1] - y[i]), head_width=a_scale,
            color='g', length_includes_head=True)

    #ax.xlim(0, max(x)*1.1)
    #ax.ylim(0, max(y)*1.1)
    ax.set_xlabel(None)
    ax.set_ylabel(None)
    ax.set_title(self.comboBox.currentText())

    self.canv.draw()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
